<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" backgroundImage="background.jpg" creationComplete="initApp()" layout="absolute" minWidth="955" minHeight="600" xmlns:local="*">
	<mx:Style source="AeonGraphical.css" />
	<mx:Script>
		<![CDATA[
			import com.personInfo;
			import com.yourpalmark.chat.ChatManager;
			import com.yourpalmark.chat.data.ChatRoom;
			
			import mx.collections.ArrayCollection;
			import mx.containers.FormItem;
			import mx.controls.Alert;
			import mx.rpc.soap.WebService;
			
			import org.igniterealtime.xiff.collections.events.CollectionEvent;
			import org.igniterealtime.xiff.core.Browser;
			import org.igniterealtime.xiff.core.EscapedJID;
			import org.igniterealtime.xiff.core.UnescapedJID;
			import org.igniterealtime.xiff.core.XMPPConnection;
			import org.igniterealtime.xiff.data.IQ;
			import org.igniterealtime.xiff.data.Message;
			import org.igniterealtime.xiff.data.disco.ItemDiscoExtension;
			import org.igniterealtime.xiff.events.LoginEvent;
			import org.igniterealtime.xiff.events.MessageEvent;
			import org.igniterealtime.xiff.events.XIFFErrorEvent;
			import org.igniterealtime.xiff.im.Roster;
			import org.igniterealtime.xiff.util.DateTimeParser;
			public var chatManager;
			public var messageDict:Dictionary;
			public var _room:ChatRoom;
			public var browser:Browser;
			private var targetRoom:String="测试";	
			[Bindable]public var loginInfo:Object;
			private function initApp()
			{
				setupChatManager();				
			}
			private function setupChatManager():void
			{
				chatManager = new ChatManager();
				chatManager.addEventListener( LoginEvent.LOGIN, onLogin );
				chatManager.addEventListener( XIFFErrorEvent.XIFF_ERROR, onXIFFError );
				//chatManager.addEventListener( MessageEvent.MESSAGE, onMessage );
				/* chatManager.addEventListener( OutgoingDataEvent.OUTGOING_DATA, onOutgoingData );
				chatManager.addEventListener( IncomingDataEvent.INCOMING_DATA, onIncomingData );
				chatManager.addEventListener( RegistrationSuccessEvent.REGISTRATION_SUCCESS, onRegistrationSuccess );
				chatManager.addEventListener( PresenceEvent.PRESENCE, onPresence );
				
				chatManager.addEventListener( InviteEvent.INVITED, onInvited );
				chatManager.addEventListener( RosterEvent.ROSTER_LOADED, onRosterLoaded );
				chatManager.addEventListener( RosterEvent.SUBSCRIPTION_DENIAL, onSubscriptionDenial );
				chatManager.addEventListener( RosterEvent.SUBSCRIPTION_REQUEST, onSubscriptionRequest );
				chatManager.addEventListener( RosterEvent.SUBSCRIPTION_REVOCATION, onSubscriptionRevocation );
				chatManager.addEventListener( RosterEvent.USER_AVAILABLE, onUserAvailable );
				chatManager.addEventListener( RosterEvent.USER_UNAVAILABLE, onUserUnavailable );*/
				chatManager.chatUserRoster.addEventListener( CollectionEvent.COLLECTION_CHANGE, onChatUserRosterChange ); 				
			}
			public function initRoom():void
			{
				_room = new ChatRoom();		
				var server:EscapedJID= new EscapedJID( chatManager.conferenceServer );
				browser = new Browser( chatManager.connection );
				browser.getServiceItems( server, onGetServiceItems );
			}
			private function onGetServiceItems( iq:IQ):void
			{
				var extensions:Array = iq.getAllExtensions();
				var disco:ItemDiscoExtension = extensions.length > 0 ? extensions[ 0 ] : null;			
				if( disco )
				{
					for each(var roomjid:Object in disco.items)
					{
						_room.chatManager=chatManager;
						_room.join(new UnescapedJID(roomjid.jid) );
					}				
				}
			}
			public function createCrimicalRoom(roomname:String):void
			{
				_room.chatManager=chatManager;
				_room.create(roomname);
			}
			private function onLogin( event:LoginEvent):void
			{
				/* joinMUCButton.enabled = true;
				createMUCButton.enabled = true;
				groupComboBox.enabled = true;
				updateGroupBuddyComboBox.enabled = true;
				removeBuddyComboBox.enabled = true;
				presenceStateComboBox.enabled = true;
				presenceStateComboBox.dataProvider = presenceDataProvider;
				changeIconButton.enabled = true;
				disconnectButton.enabled = true;
				connectButton.enabled = false;
				registerButton.enabled = false; */
				this.initRoom();
				login.visible=false;
				managerface.visible=true;
				managerface.initManagerFace();
				
			}
			private function onChatUserRosterChange(event:CollectionEvent):void
			{
				//chatroom.friendList.removeAllChildren();
				/* for each(var perosn:Object in chatManager.roster.source)
				{
					var item:FormItem=new FormItem();
					chatroom._tojid=chatManager.roster.source[0].jid
					item.label=perosn.nickname;
					item.width=chatroom.friendList.width;
					chatroom.friendList.addChild(item);
				} */
				//this.initRoom();
			}			
			//获取聊天信息
			private function onMessage( event:MessageEvent ):void
			{
				var message:Message = event.data as Message;					
				if( message.type == Message.TYPE_GROUPCHAT )
				{					
					trace("内容:"+message.body+"---源头:"+message.from.resource+"---时间:"+message.time )
				}	 	 		
			}
			
			private function onXIFFError( event:XIFFErrorEvent):void
			{
				trace(event.toString());
				/* var error:Object = { errorCode: event.errorCode, errorCondition: event.errorCondition, errorMessage: event.errorMessage, errorType: event.errorType };
				errorDataProvider.addItem( error );
				logDataProvider.addItem( "XIFFErrorEvent " + "onXIFFError: " + "type:" + event.errorType + "  message:" + event.errorMessage );
				callLater( updateLogScrollPosition ); */
			}			
		]]>
	</mx:Script>
	<local:ManagerFace id="managerface" verticalCenter="0" horizontalCenter="0" visible="false"/>
	<local:LoginDialog id="login" verticalCenter="0" horizontalCenter="0" visible="true"/>	
</mx:Application>
